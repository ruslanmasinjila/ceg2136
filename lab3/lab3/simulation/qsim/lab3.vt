// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2015 16:54:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab3top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab3top_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	clk,
	CLRN,
	S0,
	S1,
	S2,
	S3,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
input  clk;
input  CLRN;
input  S0;
input  S1;
input  S2;
input  S3;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3 or clk or CLRN or S0 or S1 or S2 or S3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab3top_vlg_check_tst (
	C0,
	C1,
	C2,
	C3,
	Cy,
	S,
	V,
	Z,
	sampler_rx
);
input  C0;
input  C1;
input  C2;
input  C3;
input  Cy;
input  S;
input  V;
input  Z;
input sampler_rx;

reg  C0_expected;
reg  C1_expected;
reg  C2_expected;
reg  C3_expected;
reg  Cy_expected;
reg  S_expected;
reg  V_expected;
reg  Z_expected;

reg  C0_prev;
reg  C1_prev;
reg  C2_prev;
reg  C3_prev;
reg  Cy_prev;
reg  S_prev;
reg  V_prev;
reg  Z_prev;

reg  C0_expected_prev;
reg  C1_expected_prev;
reg  C2_expected_prev;
reg  C3_expected_prev;
reg  Cy_expected_prev;
reg  S_expected_prev;
reg  V_expected_prev;
reg  Z_expected_prev;

reg  last_C0_exp;
reg  last_C1_exp;
reg  last_C2_exp;
reg  last_C3_exp;
reg  last_Cy_exp;
reg  last_S_exp;
reg  last_V_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	C0_prev = C0;
	C1_prev = C1;
	C2_prev = C2;
	C3_prev = C3;
	Cy_prev = Cy;
	S_prev = S;
	V_prev = V;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	C0_expected_prev = C0_expected;
	C1_expected_prev = C1_expected;
	C2_expected_prev = C2_expected;
	C3_expected_prev = C3_expected;
	Cy_expected_prev = Cy_expected;
	S_expected_prev = S_expected;
	V_expected_prev = V_expected;
	Z_expected_prev = Z_expected;
end



// expected C3
initial
begin
	C3_expected = 1'bX;
end 

// expected C2
initial
begin
	C2_expected = 1'bX;
end 

// expected C1
initial
begin
	C1_expected = 1'bX;
end 

// expected C0
initial
begin
	C0_expected = 1'bX;
end 

// expected V
initial
begin
	V_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected S
initial
begin
	S_expected = 1'bX;
end 

// expected Cy
initial
begin
	Cy_expected = 1'bX;
end 
// generate trigger
always @(C0_expected or C0 or C1_expected or C1 or C2_expected or C2 or C3_expected or C3 or Cy_expected or Cy or S_expected or S or V_expected or V or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C0 = %b | expected C1 = %b | expected C2 = %b | expected C3 = %b | expected Cy = %b | expected S = %b | expected V = %b | expected Z = %b | ",C0_expected_prev,C1_expected_prev,C2_expected_prev,C3_expected_prev,Cy_expected_prev,S_expected_prev,V_expected_prev,Z_expected_prev);
	$display("| real C0 = %b | real C1 = %b | real C2 = %b | real C3 = %b | real Cy = %b | real S = %b | real V = %b | real Z = %b | ",C0_prev,C1_prev,C2_prev,C3_prev,Cy_prev,S_prev,V_prev,Z_prev);
`endif
	if (
		( C0_expected_prev !== 1'bx ) && ( C0_prev !== C0_expected_prev )
		&& ((C0_expected_prev !== last_C0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C0_exp = C0_expected_prev;
	end
	if (
		( C1_expected_prev !== 1'bx ) && ( C1_prev !== C1_expected_prev )
		&& ((C1_expected_prev !== last_C1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1_expected_prev);
		$display ("     Real value = %b", C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C1_exp = C1_expected_prev;
	end
	if (
		( C2_expected_prev !== 1'bx ) && ( C2_prev !== C2_expected_prev )
		&& ((C2_expected_prev !== last_C2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C2_exp = C2_expected_prev;
	end
	if (
		( C3_expected_prev !== 1'bx ) && ( C3_prev !== C3_expected_prev )
		&& ((C3_expected_prev !== last_C3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C3_exp = C3_expected_prev;
	end
	if (
		( Cy_expected_prev !== 1'bx ) && ( Cy_prev !== Cy_expected_prev )
		&& ((Cy_expected_prev !== last_Cy_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cy_expected_prev);
		$display ("     Real value = %b", Cy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Cy_exp = Cy_expected_prev;
	end
	if (
		( S_expected_prev !== 1'bx ) && ( S_prev !== S_expected_prev )
		&& ((S_expected_prev !== last_S_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S_exp = S_expected_prev;
	end
	if (
		( V_expected_prev !== 1'bx ) && ( V_prev !== V_expected_prev )
		&& ((V_expected_prev !== last_V_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_expected_prev);
		$display ("     Real value = %b", V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_V_exp = V_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#800000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab3top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg clk;
reg CLRN;
reg S0;
reg S1;
reg S2;
reg S3;
// wires                                               
wire C0;
wire C1;
wire C2;
wire C3;
wire Cy;
wire S;
wire V;
wire Z;

wire sampler;                             

// assign statements (if any)                          
lab3top i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.clk(clk),
	.CLRN(CLRN),
	.Cy(Cy),
	.S(S),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.V(V),
	.Z(Z)
);

// CLRN
initial
begin
	CLRN = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// S3
initial
begin
	S3 = 1'b1;
end 

// S2
initial
begin
	S2 = 1'b0;
end 

// S1
initial
begin
	S1 = 1'b1;
end 

// S0
initial
begin
	S0 = 1'b0;
end 

// A3
initial
begin
	A3 = 1'b1;
end 

// A2
initial
begin
	A2 = 1'b0;
end 

// A1
initial
begin
	A1 = 1'b1;
end 

// A0
initial
begin
	A0 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

// B0
initial
begin
	B0 = 1'b1;
end 

lab3top_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.clk(clk),
	.CLRN(CLRN),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.sampler_tx(sampler)
);

lab3top_vlg_check_tst tb_out(
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.Cy(Cy),
	.S(S),
	.V(V),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

